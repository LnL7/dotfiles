[include]
  path = .gitconfig.local

[color]
  ui = auto

[core]
  excludesfile = ~/.gitignore
  autocrlf     = input

[merge]
  ff   = only
  tool = splice

[mergetool "splice"]
  cmd           = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
  trustExitCode = true

[pager]
  reflog = false
  diff   = false
  log    = false

[pretty]
  colored = format:%C(yellow)%h%Cblue%d%Creset %s %C(white)  %an, %ar%Creset\n

# [remote "origin"]
#   fetch = +refs/heads/*:refs/remotes/upstream/*
#   fetch = +refs/pull/*/head:refs/pull/upstream/*

[alias]
  create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git remote prune origin && git branch -D $1' -
  lsch          = "!f() { git diff --name-status -r "HEAD~$1"; }; f"
  merge-branch  = !git checkout master && git merge @{-1}
  trash         = !mkdir -p .Trashes && git ls-files --others --exclude-standard | xargs mv -f -t .Trashes
  up            = !git fetch origin && git rebase origin/master

  ## Add
  a  = add
  aa = add --all --intent-to-add
  ap = add --patch
  au = add --update

  ## Branch
  b  = branch
  ba = branch --all --verbose

  ## Clone
  c1 = clone --depth 1

  ## Commit
  c  = commit --verbose
  ca = commit --amend
  cm = commit -m

  ## Checkout
  co = checkout
  cb = checkout -B

  ## Cherry-Pick
  cp = cherry-pick

  ## Diff
  d  = diff --minimal --ignore-space-change --ignore-all-space --ignore-blank-lines --word-diff=color
  dc = diff --cached
  dn = diff --name-status
  ds = diff --stat

  ## Fetch
  f  = fetch --all

  ## Grep

  ## Init
  i  = init

  ## Log
  l  = log -16 --pretty=colored --graph
  la = log -16 --pretty=colored --simplify-by-decoration --all
  ll = log -16 --pretty=format':%h %s   %an, %ar\n'
  ln = log -16 --pretty=colored --name-only

  ## Merge
  m  = merge
  ms = merge --squash

  ## Move

  ## Push
  p  = push
  pu = push -u
  pt = push --tags

  ## Pull
  pl = pull
  pr = pull --rebase

  ## Rebase
  rb = rebase
  ri = rebase --interactive

  ## Reflog
  rl = reflog -32

  ## Remote
  r  = remote
  rv = remote --verbose

  ## Reset
  rs = reset
  rh = reset --hard
  rs = reset --soft

  ## Remove
  rc = rm --cached

  ## Show

  ## Stash
  sa = stash apply
  sl = stash list
  sp = stash pop
  ss = stash save

  ## Status
  s  = status --short
  st = status --verbose

  ## SubModule
  sm = submodule

  ## Tag
  t = tag
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
