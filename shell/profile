:d() {
    eval "$(direnv hook zsh)"
}

:r() {
    direnv reload
}

:u() {
   local i
   local -a refs
   for i in "${@}"; do
       if [[ ! "$i" =~ "(:|#)" ]]; then
           i="flake:lnl#darwinPackages.$i"
       fi
       refs+=("$i")
   done
   eval "$(direnv apply_dump <(nix shell "${refs[@]}" -c direnv dump))"
   name+="${name:+ }$*"
   IN_NIX_SHELL=direnv
   typeset -U PATH
}

z() {
    local dir

    dir=$(find ~/Code -mindepth 2 -maxdepth 2 | fzf --preview-window right:50% --preview 'git -C {} log --pretty=color --color=always -16')
    cd "$dir"
}

fzf-store() {
    find /nix/store -type d -mindepth 1 -maxdepth 1 | fzf -m --preview-window right:50% --preview 'nix-store -q --tree {}'
}

xi() {
    curl -F 'f:1=<-' ix.io
}

vat() {
    TERM=vt100 nvim -R "$@" "+setl updatetime=0" "+autocmd CursorHold * :q"
}

nixq() {
    nix eval --json "(
    with builtins;
    with import <nixpkgs/lib>;
    let
      _ = fromJSON (readFile /dev/stdin);
      _0 = head _;
      _1 = head _0;
      _2 = head _1;
    in
    $*
    )"
}

nix-unpack() {
    nix-shell --run 'phases=unpackPhase genericBuild' "$@"
}

hydra-bad-machines() {
    local url=https://hydra.nixos.org
    curl -fsSL -H 'Accept: application/json' $url/queue-runner-status | jq -r '.machines | to_entries | .[] | select(.value.consecutiveFailures>0) | .key'
}

hydra-job-revision() {
    local jobseteval job=$1
    shift 1
    case "$job" in
        *'/'*) ;;
        *) job="nixpkgs/trunk/$job" ;;
    esac
    case "$job" in
        'http://'*|'https://'*) ;;
        *) job="https://hydra.nixos.org/job/$job" ;;
    esac
    jobseteval=$(curl -fsSL -H 'Content-Type: application/json' "$job/latest" | jq '.jobsetevals[0]')
    curl -fsSL -H 'Accept: application/json' "${job%/job*}/eval/$jobseteval" | jq -r '.jobsetevalinputs.nixpkgs.revision'
}

hydra-job-bisect() {
    local job=$1
    shift 1
    nix-build ./pkgs/top-level/release.nix -A "${job##*/}" --dry-run "$@" || return
    git bisect start HEAD "$(hydra-job-revision "$job")"
    git bisect run nix-build ./pkgs/top-level/release.nix -A "${job##*/}" "$@"
}

hydra-job-outputs() {
    local job=$1
    shift 1
    curl -fsSL -H 'Accept: application/json' "$job/latest" | jq -r '.buildoutputs | to_entries | .[].value.path'
}

hydra-build-log() {
    local build=$1
    shift 1
    nix log "$(curl -fsSL -H 'Accept: application/json' "$build/api/get-info" | jq -r .drvPath)"
}

rev-darwin() {
    local rev=$1
    shift 1
    echo "https://github.com/LnL7/nix-darwin/archive/${rev:-master}.tar.gz"
}

rev-nixpkgs() {
    local rev=$1
    shift 1
    echo "https://github.com/NixOS/nixpkgs/archive/${rev:-master}.tar.gz"
}

pr-nixpkgs() {
    local pr=$1
    shift 1
    rev-nixpkgs "$(curl "https://api.github.com/repos/NixOS/nixpkgs/pulls/$pr/commits" | jq -r '.[-1].sha')"
}

tmux-run() {
    tmux split-window -c '#{pane_current_path}' -p 25
    if [ $# -gt 0 ]; then
        tmux send-keys -t . "$*" Enter
    fi
}

gh-darwin-debug() {
    curl -X POST -fsSL \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token $GITHUB_TOKEN" \
        --data '{"event_type": "debug"}' \
        https://api.github.com/repos/LnL7/nix-darwin/dispatches
}

pushover() {
    local i
    "$@"
    i=$?
    curl -fsSL -XPOST \
        --form-string "token=$PUSHOVER_TOKEN" \
        --form-string "user=$PUSHOVER_USER" \
        --form-string "expire=60" \
        --form-string "sound=intermission" \
        --form-string "message=$*: completed with status $i" \
        https://api.pushover.net/1/messages.json > /dev/null
    return "$i"
}
