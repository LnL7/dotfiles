fnix() {
  local cache="$HOME/.nixpkgs/cache"
  [ -f $cache ] || nix-env -qa \* -P --no-name > $cache

  cat $cache | fzf --query="$1" -m
}

fnix-haskell() {
  local cache="$HOME/.nixpkgs/cache-haskell"
  [ -f $cache ] || nix-env -qaA nixpkgs.haskellPackages -P --no-name > $cache

  cat $cache | fzf --query="$1" -m
}

fnix-python() {
  local cache="$HOME/.nixpkgs/cache-python"
  [ -f $cache ] || nix-env -qaA nixpkgs.pythonPackages -P --no-name > $cache

  cat $cache | fzf --query="$1" -m
}

fnix-uninstall() {
  nix-env -q | fzf --query="$1" -m | xargs nix-env -e
}

xnix-description () {
  xargs nix-env --description -qaA "$@"
}

xnix-drv () {
  xargs nix-env --drv-path -qaA "$@" | jq .
}

xnix-out () {
  xargs nix-env --out-path -qaA "$@" | jq .
}

xnix-install () {
  xargs nix-env -iA "$@"
}

fnix-build-inputs () {
  local drv=$( nix-instantiate '<nixpkgs>' -A "$@" 2> /dev/null )
  nix-store -qR "${drv}" | fzf -m
}

nix-download () {
  nix-store -r $(grep -l outputHash $(nix-store -qR $(nix-instantiate '<nixpkgs>' -A "$@") | grep '.drv$'))
}

nix-shell-ghc () {
  local expr='
  { nixpkgs ? import <nixpkgs> {}, compiler ? "ghc7101" }:
  (nixpkgs.pkgs.haskell.packages.${compiler}.callPackage ./. {}).env
  '
  nix-shell --run zsh -E "${expr}" "$@"
}

nix-shell-ghc-package () {
  nix-shell --run zsh -p "haskellPackages.ghcWithPackages (p: with p; [ $@ ])"
}

# vim:set ft=zsh:
