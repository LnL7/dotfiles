# vim:set ft=sh:

nix () {
  case "$1" in
    'b'|'build')       __nix_build "${@:2}" ;;
    'e'|'eval')        __nix_eval "${@:2}" ;;
    'i'|'instantiate') __nix_instantiate "${@:2}" ;;
    'l'|'link')        __nix_link "${@:2}" ;;
    'r'|'repl')        __nix_repl "${@:2}" ;;
    's'|'shell')       __nix_shell "${@:2}" ;;
    'x'|'exec')        __nix_exec "${@:2}" ;;
    'z'|'zsh')         __nix_exec "${@:2}" ;;
    'p'|'pkg')         __nix_exec -p "${@:2}" ;;
    'q'|'search')      __nix_search "${@:2}" ;;
    'gc-roots')        __nix_gc_roots "${@:2}" ;;
    'gc')              __nix_store --gc "${@:2}" ;;
    '--delete')        __nix_delete ;;
    '-h') type -f "$0" ;;
    *) __nix_env "$@" ;;
  esac
}

__nix_build () {
  __nix_expr_do nix-build "$@" || return
}

__nix_eval () {
  __nix_expr_do nix-instantiate --eval --strict "$@" || return
}

__nix_link () {
  __nix_expr_do nix-instantiate --indirect --add-root "$@" || return
}

__nix_instantiate () {
  __nix_expr_do nix-instantiate "$@" || return
}

__nix_shell () {
  __nix_expr_do nix-shell "$@" || return
}

__nix_exec () {
  local -a args_a
  args_a=()

  while (( $# )); do
    case "$1" in
      '--') shift && break ;;
      *)    args_a+="$1" && shift ;;
    esac
  done

  __nix_expr_do nix-shell $args_a -- --run "${*:-$SHELL}" || return
}

__nix_repl () {
  ( nix-repl '<nixpkgs>' "$@" ) || return
}

__nix_env () {
  ( nix-env "$@" ) || return
}

__nix_delete () {
  __nix_store --delete --ignore-liveness "$@" || return
}

__nix_store () {
  ( nix-store "$@" ) || return
}

__nix_gc_roots () {
  local -a exec_a
  exec_a=()
  if test -z "$1"; then
    exec_a+=('grep' '-v' '/nix/var/nix/profiles')
  fi
  exec_a+=$@
  __nix_store --gc --print-roots | $exec_a || return
}

__nix_search () {
  local attr cache
  attr='nixpkgs'
  if test -n "$1"; then
    attr="nixpkgs.$1" && shift
  fi

  cache="$HOME/.cache/fzf/$attr"
  if ! test -f "$cache"; then
    nix-env -qaA "$attr" -P > $cache
  fi
  cat "$cache" | fzf +m --history="${cache}_history" --reverse \
    --bind="enter:execute:(echo {} | awk '{print \$1}' | xargs -I% nix-env -qaA % -P --drv-path --out-path --description | cut -d' ' -f5- | less -R)"
}


__nix_expr_do () {
  local -a exec_a expr_a
  local arg
  exec_a=()
  expr_a=()

  arg='-E'
  exec_a+="$1" && shift
  while (( $# )); do
    case "$1" in
      '--')
        shift
        while (( $# )); do
          case "$1" in
            '--') shift ;;
            *)    exec_a+="$1" && shift ;;
          esac
        done
        break
        ;;
      '-E'|'-p') arg="$1" && shift ;;
      '-'*)      exec_a+="$1" && shift ;;
      *)         expr_a+="$1" && shift ;;
    esac
  done

  ( $exec_a $arg "$(__nix_expr $expr_a)" ) || return
}

__nix_expr () {
  local expr
  expr="{ }"
  if test -f default.nix; then
    expr="callPackage ./. {}"
  fi

  if test -n "$1"; then
    expr="with $expr; $@"
  fi
  echo "with import <nixpkgs> {}; $expr" || return
}

# fnix-build-inputs () {
#   local drv=$( nix-instantiate '<nixpkgs>' -A "$@" 2> /dev/null )
#   nix-store -qR "${drv}" | fzf -m
# }

# nix-download () {
#   nix-store -r $(grep -l outputHash $(nix-store -qR $(nix-instantiate '<nixpkgs>' -A "$@") | grep '.drv$'))
# }
