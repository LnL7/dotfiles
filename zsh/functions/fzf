# vim:set ft=sh:

f () {
  ( fzf --header-lines=1 "$@" ) || return
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe () {
  local file
  file=$(fzf --query="$1" +m) || return
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# Equivalent to above, but opens it with `open` command
fo () {
  local file
  file=$(fzf +m) || return
  [ -n "$file" ] && open "$@" "$file"
}

# fd - cd to selected directory
fd () {
  local dir
  dir=$(dirs | tr " " "\n" | fzf +m) || return
  cd "$dir" || return
}

# fkill - kill process
fkill () {
  pid=$(ps -ef | fzf --header-lines=1 -m | awk '{print $2}') || return

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill "${1:-9}" || return
  fi
}

# fgit - git browser
fgit () {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf +m --ansi --reverse \
      --bind "enter:execute:
                (grep -o '[a-f0-9]\{7\}' |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# ftags - search ctags
ftags () {
  local line
  [ -e tags ] || return
  line=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    cut -c1-80 | fzf --nth=1,2
  ) || return
  $EDITOR $(cut -f3 <<< "$line") -c "set nocst" -c "silent tag $(cut -f2 <<< "$line")" || return
}

# fghc - list ghc packages
fghc () {
  ( ghc-pkg list --global --user --simple-output | tr " " "\n" | fzf --query "$1" -m ) || return
}

# fhoogle - list hoogle query
fhoogle () {
  ( hoogle "$@" | fzf -m ) || return
}
